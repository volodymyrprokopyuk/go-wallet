* BIP-32 Hierarchical deterministic wallet
:PROPERTIES:
:TOC: :include descendants
:END:

:CONTENTS:
:END:

** Concepts and purpose

*** HD wallet

- HD wallet :: A hierarchical deterministic HD wallet deterministically derives
  an infinite hierarchy of private and public keys from a single seed of 128 to
  256 bits of entropy. The seed itself is derived from a mnemonic and en
  optional passphrase. Only the mnemonic with an optional passphrase is required
  to backup, export, and import the entire HD wallet with all derived keys. The
  key derivation process is deterministic, so all hierarchy of private and
  public keys can be re-derived from the same mnemonic with an optional
  passphrase. The derived keys are organized in a tree hierarchy with an
  unlimited depth. Different branches of a tree can be used for selective
  sharing and different purposes e.g. different accounts, different
  cryptocurrencies, different accounting purposes.
- Security of derived keys :: While all private and public keys are derived from
  a single mnemonic with an optional passphrase, all derived keys are as secure
  as independently generated keys. To an external observer all derived keys look
  indistinguishable from independently generated keys. There is no feasible way
  to determine whether a key is a child or a sibling of another key. The main
  difference between a HD wallet that derives all keys from a single mnemonic
  with an optional passphrase and a non-deterministic wallet that generates each
  key independently is that only a single mnemonic with an optional passphrase
  is required to backup, export, and import a HD wallet, while every
  independently generated key must be backup as soon as it is generated by a
  non-deterministic wallet. Generating a new receiving address with a new
  spending private key for every transaction is recommended to preserve privacy
  of transactions on a blockchain
- Derivation of public keys :: Public keys to receive funds can be derived in a
  less secure environment e.g. web server from an extended public key without
  having access to the corresponding private extended key to generated
  respective private keys to spend received funds. Later corresponding private
  keys can be derived in a more secure environment e.g. hardware wallet to spend
  received funds

*** Seed derivation


- Seed derivation :: A 512 bits (64 bytes) seed used to derive master extended
  private and public keys of a HD wallet is derived from a 128 to 256 bits
  entropy mnemonic and an optional passphrase. The seed derivation process uses
  the PBKDF2-SHA512 key derivation function with 2048 iterations of the
  HMAC-SHA512 message authentication code function. The mnemonic is used as a
  password and the passphrase is used as a salt for the PBKDF2-SHA512 key
  derivation function. The passphrase, if used, is an additional security
  factor. A mnemonic is useless without a passphrase. A backup of a passphrase
  should be kept in a different place that a backup of a mnemonic. Different
  passphrases result in a completely different set of derived keys. The salt and
  the high number of HMAC-SHA512 iterations makes brute force attacks and
  table-based attacks much more difficult

*** Derivation of master extended keys


- Derivation of master extended keys :: The master extended private and public
  keys are used to derive all other keys in a HD wallet. The master extended
  private key is used to derive all private keys (and all public keys if needed)
  in a HD wallet. The master extended public key can be used to derive only all
  public keys in a HD wallet. The master extended private and public keys are at
  the depth 0 and at the index 0. A 512 bits seed derived from a mnemonic with
  an optional passphrase is used as data and a fixed "Bitcoin seed" string is
  used as a key to the HMAC-SHA512 message authentication code function to
  produce a 512 bits authenticated hash. The first 32 bytes of the authenticated
  hash are used as a master private key. The last (next) 32 bytes of the
  authenticated hash are used as a chain code needed to derive both private and
  public keys. A chain code prevents others from deriving child private and
  public keys if they have access to the corresponding parent private or public
  key. A master public key is derived (using the normal elliptic curve
  multiplication) from a master private key by multiplying the master private
  key by the generator point of the secp256k1 elliptic curve. A 64 bytes
  concatenation of a master private key with a chain code is called a master
  extended private key. A 64 bytes concatenation of a master public key with the
  same chain code is called a master extended public key

*** Derivation of private extended keys

- Derivation of private extended keys :: The extended private keys are
  identified in the tree hierarchy of a HD wallet by the depth that defines the
  parent-child positioning of keys and by the index that defines a sibling
  positioning between derived keys. A child private key is derived from the
  corresponding parent extended private key, a depth and and index of the child
  private key

*** Derivation of hardened extended keys

*** Derivation of public extended keys

*** Encoding and decoding of extended keys

** Design and implementation

*** =ExtKey= type

*** Seed derive

*** Master derive

*** Private derive

*** Hardened derive

*** Public derive

*** Extended key encode

*** Extended key decode

** Testing and usage

*** Testing all HD wallet CLI commands

#+BEGIN_SRC nushell
go build -o wallet; ./key/cli-test.nu
#+END_SRC

*** Using =hd seed= and =hd master= CLI commands
*** Using =hd private= and =hd hardened= CLI commands
*** Using =hd public= CLI commands
*** Using =hd decode= CLI commands
