* ERC-55 Ethereum address encoding
:PROPERTIES:
:TOC: :include descendants
:END:

:CONTENTS:
- [[#concepts-and-purpose][Concepts and purpose]]
  - [[#erc-55-ethereum-address-encoding][ERC-55 Ethereum address encoding]]
- [[#design-and-implementation][Design and implementation]]
  - [[#address-encode][Address encode]]
  - [[#address-verify][Address verify]]
- [[#testing-and-usage][Testing and usage]]
  - [[#testing-address-encode-and-address-verify-cli-commands][Testing address encode and address verify CLI commands]]
  - [[#using-address-encode-and-address-verify-cli-commands][Using address encode and address verify CLI commands]]
:END:

** Concepts and purpose

*** ERC-55 Ethereum address encoding

[[https://eips.ethereum.org/EIPS/eip-55][ERC-55 Mixed-case checksum address encoding]]

- ERC-55 Ethereum address encoding :: The ERC-55 Ethereum address encoding is a
  backward-compatible, mixed-case encoding of case-insensitive Ethereum
  addresses that incorporates a checksum into the now case-sensitive address by
  changing the capitalization of hex digit letters of an Ethereum address. The
  address encoding conveys error-detecting information without changing the
  semantic address value. The address encoding is used to detect errors and
  protect against mistakes with the 99.986% accuracy

** Design and implementation

*** Address encode

- Address encode :: The =AddressEncode= function encodes an Ethereum address and
  incorporates an error detecting checksum. The address encode function
  - Convert the address into a lower case hex string
  - Compute the keccak256 hash of the address hex string
  - Convert the keccak256 hash into a lower case hex string
  - For each character of the address hex string
    - Capitalize each character of the address hex string if the hex value of
      the corresponding character of the hash hex string is greater than or
      equal to 8, leaving other characters of the address hex string unchanged
  - Return the encoded mixed-case address with the incorporated checksum
  #+BEGIN_SRC go
func AddressEncode(addr []byte) string {
  hexAddr := fmt.Sprintf("%x", addr)
  hash := crypto.Keccak256([]byte(hexAddr))
  hexHash := fmt.Sprintf("%x", hash)
  chAddr := strings.Split(hexAddr, "")
  chHash := strings.Split(hexHash, "")
  var encAddr strings.Builder
  for i := range chAddr {
    h, _ := strconv.ParseInt(chHash[i], 16, 8)
    a := chAddr[i]
    if h >= 8 {
      a = strings.ToUpper(a)
    }
    encAddr.WriteString(a)
  }
  return encAddr.String()
}
  #+END_SRC

*** Address verify

- Address verify :: The =AddressVerify= function verifies that the encoded
  mixed-case Ethereum address does not have errors. The address verify function
  - Convert the address into a lower case hex string
  - Compute the keccak256 hash of the address hex string
  - Convert the keccak256 hash into a lower case hex string
  - For each character of the address hex string
    - Check that each character of the encoded address hex string is in the
      upper case if the hex value of the corresponding character of the hash hex
      string is greater than or equal to 8, and is in the lower case otherwise
  - Return true if the above conditions are hold for all characters of the
    encoded address hex string, or false otherwise
    #+BEGIN_SRC go
  var reUpper = regexp.MustCompile(`[A-F0-9]`)
  var reLower = regexp.MustCompile(`[a-f0-9]`)

  func AddressVerify(hexAddr string) error {
    hash := crypto.Keccak256([]byte(strings.ToLower(hexAddr)))
    hexHash := fmt.Sprintf("%x", hash)
    chAddr := strings.Split(hexAddr, "")
    chHash := strings.Split(hexHash, "")
    for i := range hexAddr {
      h, _ := strconv.ParseInt(chHash[i], 16, 8)
      a := chAddr[i]
      if h >= 8 && !reUpper.MatchString(a) || h < 8 && !reLower.MatchString(a) {
        return fmt.Errorf("address verify: invalid checksum")
      }
    }
    return nil
  }
    #+END_SRC

** Testing and usage

*** Testing =address encode= and =address verify= CLI commands

#+BEGIN_SRC nushell
go build -o wallet; ./key/cli-test.nu
#+END_SRC

*** Using =address encode= and =address verify= CLI commands

Show the help and usage instructions of the =wallet address= command
#+BEGIN_SRC nushell
./wallet address
# NAME:
#    wallet address - Encode and verify an Ethereum address (ERC-55)

# USAGE:
#    wallet address [command [command options]]

# COMMANDS:
#    encode  Encode an Ethereum address (ERC-55)
#              stdin: an Ethereum address in hex
#              stdout: an encoded case-sensitive Ethereum address string
#    verify  Verify an encoded case-sensitive Ethereum address (ERC-55)
#              stdin: an encoded case-sensitive Ethereum address string
#              stdout: true if the address is valid, false otherwise

# OPTIONS:
#    --help, -h  show help
#+END_SRC

Generate a secp256k1 key pair. Compute the Ethereum address from the public key.
Encode the address and incorporate the error detecting checksum. Note, the
encoded address has some letters capitalized, while the initial address is all
lower case. Verify the encoded address and confirm that the address is valid and
does not have errors. Modify the encoded address in order to introduce errors.
Verify the encoded address with errors and confirm that the validation returns
the invalid checksum error
#+BEGIN_SRC nushell
$env.PATH = $env.PATH | prepend ("." | path expand)
let key = wallet key generate | from yaml
print $key
# ╭──────┬────────────────────────────────────────────────────────────────────────────────────╮
# │ prv  │ 840257eb47ab36bbd952b18f856eb399c57534d8eacda2765e89b799f214bde5                   │
# │ pub  │ 04e9eb5e40adab72f15ffe5b650498bc320252b92284c2522e3a30f5ed0bbe7da993b442e1a48e5840 │
# │      │ f59d9b72cf6df6b9fa3d2b45099388b503fbcfc2d77019ed                                   │
# │ pubc │ 03e9eb5e40adab72f15ffe5b650498bc320252b92284c2522e3a30f5ed0bbe7da9                 │
# ╰──────┴────────────────────────────────────────────────────────────────────────────────────╯
let addr = $key.pub | wallet key address
print $addr
# 883477898a318f37fd7e4f19f9d3e47400f5bd5f
let encAddr = $addr | wallet address encode
print $encAddr
# 883477898A318F37Fd7E4F19f9D3e47400f5BD5F
$encAddr | wallet address verify
# true
$encAddr | str replace --regex '[a-f]' "A" | wallet address verify
# address verify: invalid checksum
# false
#+END_SRC
